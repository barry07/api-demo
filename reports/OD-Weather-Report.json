{
  "stats": {
    "suites": 1,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2025-10-04T02:47:47.262Z",
    "end": "2025-10-04T02:48:10.342Z",
    "duration": 23080,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "cb127547-4bca-46a3-aab6-08a4d8dffd5a",
      "title": "",
      "fullFile": "C:\\Users\\Admin\\projects\\api-demo\\test\\4.getEasyWind.test.js",
      "file": "\\test\\4.getEasyWind.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "56b488e5-efaa-4789-8d56-b8ab7e7868ff",
          "title": "Easy Wind API",
          "fullFile": "C:\\Users\\Admin\\projects\\api-demo\\test\\4.getEasyWind.test.js",
          "file": "\\test\\4.getEasyWind.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 200 response for valid stations EW013",
              "fullTitle": "Easy Wind API should return 200 response for valid stations EW013",
              "timedOut": false,
              "duration": 1988,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePromise = request(BASE_URL)\n  .get(`${API_PREFIX}${stationId}/?period=latestdata/`);\nawait expect(responsePromise).to.eventually.have.property('status', 200);\nconst res = await responsePromise;\n// Basic sanity check\nexpect(res.body).to.be.an('object');",
              "err": {},
              "uuid": "02dabd28-f2bc-4042-88e2-8c56ebdd7014",
              "parentUUID": "56b488e5-efaa-4789-8d56-b8ab7e7868ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 response for valid stations EW008",
              "fullTitle": "Easy Wind API should return 200 response for valid stations EW008",
              "timedOut": false,
              "duration": 2432,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePromise = request(BASE_URL)\n  .get(`${API_PREFIX}${stationId}/?period=latestdata/`);\nawait expect(responsePromise).to.eventually.have.property('status', 200);\nconst res = await responsePromise;\n// Basic sanity check\nexpect(res.body).to.be.an('object');",
              "err": {},
              "uuid": "5a55775a-fc04-4c6f-9eb0-a6a29a24c8fc",
              "parentUUID": "56b488e5-efaa-4789-8d56-b8ab7e7868ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error for an invalid station shannon",
              "fullTitle": "Easy Wind API should return error for an invalid station shannon",
              "timedOut": false,
              "duration": 2149,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePromise = request(BASE_URL)\n  .get(`${API_PREFIX}${stationId}/?period=latestdata/`);\n  \nawait expect(responsePromise).to.eventually.have.property('status', 200);\nconst res = await responsePromise;\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('error');\nexpect(res.body.error).to.match(/not implemented/i);",
              "err": {},
              "uuid": "42a37453-f2b8-47c6-89fe-ee2749733cc0",
              "parentUUID": "56b488e5-efaa-4789-8d56-b8ab7e7868ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error for an invalid station derry",
              "fullTitle": "Easy Wind API should return error for an invalid station derry",
              "timedOut": false,
              "duration": 1635,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePromise = request(BASE_URL)\n  .get(`${API_PREFIX}${stationId}/?period=latestdata/`);\n  \nawait expect(responsePromise).to.eventually.have.property('status', 200);\nconst res = await responsePromise;\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('error');\nexpect(res.body.error).to.match(/not implemented/i);",
              "err": {},
              "uuid": "ca824a51-0831-48cc-b999-9709c558453b",
              "parentUUID": "56b488e5-efaa-4789-8d56-b8ab7e7868ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error for an invalid station nonexistentstation",
              "fullTitle": "Easy Wind API should return error for an invalid station nonexistentstation",
              "timedOut": false,
              "duration": 2453,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePromise = request(BASE_URL)\n  .get(`${API_PREFIX}${stationId}/?period=latestdata/`);\n  \nawait expect(responsePromise).to.eventually.have.property('status', 200);\nconst res = await responsePromise;\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('error');\nexpect(res.body.error).to.match(/not implemented/i);",
              "err": {},
              "uuid": "f77f9706-0281-4963-b6bd-cf8747481f78",
              "parentUUID": "56b488e5-efaa-4789-8d56-b8ab7e7868ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 response for valid periods latestdata",
              "fullTitle": "Easy Wind API should return 200 response for valid periods latestdata",
              "timedOut": false,
              "duration": 2146,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePromise = request(BASE_URL)\n  .get(`${API_PREFIX}EW013/?period=${period}/`);\nawait expect(responsePromise).to.eventually.have.property('status', 200);\nconst res = await responsePromise;\n// Basic sanity check\nexpect(res.body).to.be.an('object');",
              "err": {},
              "uuid": "7f80d0c2-2197-4bed-9635-ad8763e4b49d",
              "parentUUID": "56b488e5-efaa-4789-8d56-b8ab7e7868ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 response for valid periods latestday",
              "fullTitle": "Easy Wind API should return 200 response for valid periods latestday",
              "timedOut": false,
              "duration": 2351,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePromise = request(BASE_URL)\n  .get(`${API_PREFIX}EW013/?period=${period}/`);\nawait expect(responsePromise).to.eventually.have.property('status', 200);\nconst res = await responsePromise;\n// Basic sanity check\nexpect(res.body).to.be.an('object');",
              "err": {},
              "uuid": "fb64cc8d-a602-4100-9213-7ef4c01969bc",
              "parentUUID": "56b488e5-efaa-4789-8d56-b8ab7e7868ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 response for valid periods latesthour",
              "fullTitle": "Easy Wind API should return 200 response for valid periods latesthour",
              "timedOut": false,
              "duration": 1539,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePromise = request(BASE_URL)\n  .get(`${API_PREFIX}EW013/?period=${period}/`);\nawait expect(responsePromise).to.eventually.have.property('status', 200);\nconst res = await responsePromise;\n// Basic sanity check\nexpect(res.body).to.be.an('object');",
              "err": {},
              "uuid": "00b815bc-d90e-4519-ad54-e28e24b0ed3a",
              "parentUUID": "56b488e5-efaa-4789-8d56-b8ab7e7868ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error for invalid periods latestminute",
              "fullTitle": "Easy Wind API should return error for invalid periods latestminute",
              "timedOut": false,
              "duration": 2452,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePromise = request(BASE_URL)\n  .get(`${API_PREFIX}EW013/?period=${period}/`);\nawait expect(responsePromise).to.eventually.have.property('status', 200);\nconst res = await responsePromise;\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('error');\nexpect(res.body.error).to.match(/not implemented/i);",
              "err": {},
              "uuid": "69ed909c-841b-4376-8b4b-11ae64ae4556",
              "parentUUID": "56b488e5-efaa-4789-8d56-b8ab7e7868ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error for invalid periods latestsecond",
              "fullTitle": "Easy Wind API should return error for invalid periods latestsecond",
              "timedOut": false,
              "duration": 2349,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePromise = request(BASE_URL)\n  .get(`${API_PREFIX}EW013/?period=${period}/`);\nawait expect(responsePromise).to.eventually.have.property('status', 200);\nconst res = await responsePromise;\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('error');\nexpect(res.body.error).to.match(/not implemented/i);",
              "err": {},
              "uuid": "85b95903-f0ea-4408-8e0a-58c78bec3e24",
              "parentUUID": "56b488e5-efaa-4789-8d56-b8ab7e7868ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error for invalid periods latesth0ur",
              "fullTitle": "Easy Wind API should return error for invalid periods latesth0ur",
              "timedOut": false,
              "duration": 1532,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePromise = request(BASE_URL)\n  .get(`${API_PREFIX}EW013/?period=${period}/`);\nawait expect(responsePromise).to.eventually.have.property('status', 200);\nconst res = await responsePromise;\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('error');\nexpect(res.body.error).to.match(/not implemented/i);",
              "err": {},
              "uuid": "df29f305-6f94-4088-8ed8-a3a680a0750d",
              "parentUUID": "56b488e5-efaa-4789-8d56-b8ab7e7868ff",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "02dabd28-f2bc-4042-88e2-8c56ebdd7014",
            "5a55775a-fc04-4c6f-9eb0-a6a29a24c8fc",
            "42a37453-f2b8-47c6-89fe-ee2749733cc0",
            "ca824a51-0831-48cc-b999-9709c558453b",
            "f77f9706-0281-4963-b6bd-cf8747481f78",
            "7f80d0c2-2197-4bed-9635-ad8763e4b49d",
            "fb64cc8d-a602-4100-9213-7ef4c01969bc",
            "00b815bc-d90e-4519-ad54-e28e24b0ed3a",
            "69ed909c-841b-4376-8b4b-11ae64ae4556",
            "85b95903-f0ea-4408-8e0a-58c78bec3e24",
            "df29f305-6f94-4088-8ed8-a3a680a0750d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23026,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "OD-Weather-Report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "reportFilename": "OD-Weather-Report",
        "overwrite": "true",
        "html": "true",
        "json": "true"
      },
      "version": "6.3.0"
    }
  }
}