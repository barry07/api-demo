{
  "stats": {
    "suites": 1,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2025-10-04T02:50:27.964Z",
    "end": "2025-10-04T02:50:49.983Z",
    "duration": 22019,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "acd660ab-be54-4345-86fb-573b48f1dd18",
      "title": "",
      "fullFile": "C:\\Users\\Admin\\projects\\api-demo\\test\\4.getEasyWind.test.js",
      "file": "\\test\\4.getEasyWind.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1d94ca09-4555-4836-a50f-24d9904168d9",
          "title": "Easy Wind API",
          "fullFile": "C:\\Users\\Admin\\projects\\api-demo\\test\\4.getEasyWind.test.js",
          "file": "\\test\\4.getEasyWind.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 200 response for valid stations EW013",
              "fullTitle": "Easy Wind API should return 200 response for valid stations EW013",
              "timedOut": false,
              "duration": 1648,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePromise = request(BASE_URL)\n  .get(`${API_PREFIX}${stationId}/?period=latestdata/`);\nawait expect(responsePromise).to.eventually.have.property('status', 200);\nconst res = await responsePromise;\n// Basic sanity check\nexpect(res.body).to.be.an('object');",
              "err": {},
              "uuid": "132be2d5-6b56-4375-8854-a4b60b95557b",
              "parentUUID": "1d94ca09-4555-4836-a50f-24d9904168d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 response for valid stations EW008",
              "fullTitle": "Easy Wind API should return 200 response for valid stations EW008",
              "timedOut": false,
              "duration": 1609,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePromise = request(BASE_URL)\n  .get(`${API_PREFIX}${stationId}/?period=latestdata/`);\nawait expect(responsePromise).to.eventually.have.property('status', 200);\nconst res = await responsePromise;\n// Basic sanity check\nexpect(res.body).to.be.an('object');",
              "err": {},
              "uuid": "12e1e4d2-a81c-4095-b9af-0abe736bae96",
              "parentUUID": "1d94ca09-4555-4836-a50f-24d9904168d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error for an invalid station shannon",
              "fullTitle": "Easy Wind API should return error for an invalid station shannon",
              "timedOut": false,
              "duration": 2146,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePromise = request(BASE_URL)\n  .get(`${API_PREFIX}${stationId}/?period=latestdata/`);\n  \nawait expect(responsePromise).to.eventually.have.property('status', 200);\nconst res = await responsePromise;\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('error');\nexpect(res.body.error).to.match(/not implemented/i);",
              "err": {},
              "uuid": "2d031938-b142-4d4d-a18e-c85093c99809",
              "parentUUID": "1d94ca09-4555-4836-a50f-24d9904168d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error for an invalid station derry",
              "fullTitle": "Easy Wind API should return error for an invalid station derry",
              "timedOut": false,
              "duration": 2251,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePromise = request(BASE_URL)\n  .get(`${API_PREFIX}${stationId}/?period=latestdata/`);\n  \nawait expect(responsePromise).to.eventually.have.property('status', 200);\nconst res = await responsePromise;\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('error');\nexpect(res.body.error).to.match(/not implemented/i);",
              "err": {},
              "uuid": "99a94d64-d727-4916-b1ed-d8a8912cc679",
              "parentUUID": "1d94ca09-4555-4836-a50f-24d9904168d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error for an invalid station nonexistentstation",
              "fullTitle": "Easy Wind API should return error for an invalid station nonexistentstation",
              "timedOut": false,
              "duration": 2353,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePromise = request(BASE_URL)\n  .get(`${API_PREFIX}${stationId}/?period=latestdata/`);\n  \nawait expect(responsePromise).to.eventually.have.property('status', 200);\nconst res = await responsePromise;\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('error');\nexpect(res.body.error).to.match(/not implemented/i);",
              "err": {},
              "uuid": "1354170c-f7fb-4862-a23e-888d361fcc09",
              "parentUUID": "1d94ca09-4555-4836-a50f-24d9904168d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 response for valid periods latestdata",
              "fullTitle": "Easy Wind API should return 200 response for valid periods latestdata",
              "timedOut": false,
              "duration": 1734,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePromise = request(BASE_URL)\n  .get(`${API_PREFIX}EW013/?period=${period}/`);\nawait expect(responsePromise).to.eventually.have.property('status', 200);\nconst res = await responsePromise;\n// Basic sanity check\nexpect(res.body).to.be.an('object');",
              "err": {},
              "uuid": "93cb3ff4-aa28-4dd1-92e7-30199573cc17",
              "parentUUID": "1d94ca09-4555-4836-a50f-24d9904168d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 response for valid periods latestday",
              "fullTitle": "Easy Wind API should return 200 response for valid periods latestday",
              "timedOut": false,
              "duration": 1544,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePromise = request(BASE_URL)\n  .get(`${API_PREFIX}EW013/?period=${period}/`);\nawait expect(responsePromise).to.eventually.have.property('status', 200);\nconst res = await responsePromise;\n// Basic sanity check\nexpect(res.body).to.be.an('object');",
              "err": {},
              "uuid": "adc430f1-7090-492b-a5c6-fe1858067d05",
              "parentUUID": "1d94ca09-4555-4836-a50f-24d9904168d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 response for valid periods latesthour",
              "fullTitle": "Easy Wind API should return 200 response for valid periods latesthour",
              "timedOut": false,
              "duration": 2442,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePromise = request(BASE_URL)\n  .get(`${API_PREFIX}EW013/?period=${period}/`);\nawait expect(responsePromise).to.eventually.have.property('status', 200);\nconst res = await responsePromise;\n// Basic sanity check\nexpect(res.body).to.be.an('object');",
              "err": {},
              "uuid": "f56946ef-1f4b-432a-b0cb-cbbc35ddda31",
              "parentUUID": "1d94ca09-4555-4836-a50f-24d9904168d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error for invalid periods latestminute",
              "fullTitle": "Easy Wind API should return error for invalid periods latestminute",
              "timedOut": false,
              "duration": 2048,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePromise = request(BASE_URL)\n  .get(`${API_PREFIX}EW013/?period=${period}/`);\nawait expect(responsePromise).to.eventually.have.property('status', 200);\nconst res = await responsePromise;\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('error');\nexpect(res.body.error).to.match(/not implemented/i);",
              "err": {},
              "uuid": "9f0903c8-f41b-4964-91ba-bcc41f1b2d04",
              "parentUUID": "1d94ca09-4555-4836-a50f-24d9904168d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error for invalid periods latestsecond",
              "fullTitle": "Easy Wind API should return error for invalid periods latestsecond",
              "timedOut": false,
              "duration": 2350,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePromise = request(BASE_URL)\n  .get(`${API_PREFIX}EW013/?period=${period}/`);\nawait expect(responsePromise).to.eventually.have.property('status', 200);\nconst res = await responsePromise;\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('error');\nexpect(res.body.error).to.match(/not implemented/i);",
              "err": {},
              "uuid": "7e8897e0-bfc1-487f-994e-b2f9508473ae",
              "parentUUID": "1d94ca09-4555-4836-a50f-24d9904168d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error for invalid periods latesth0ur",
              "fullTitle": "Easy Wind API should return error for invalid periods latesth0ur",
              "timedOut": false,
              "duration": 1837,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePromise = request(BASE_URL)\n  .get(`${API_PREFIX}EW013/?period=${period}/`);\nawait expect(responsePromise).to.eventually.have.property('status', 200);\nconst res = await responsePromise;\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('error');\nexpect(res.body.error).to.match(/not implemented/i);",
              "err": {},
              "uuid": "1cefc896-7950-454e-a69b-87d1f32a4db0",
              "parentUUID": "1d94ca09-4555-4836-a50f-24d9904168d9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "132be2d5-6b56-4375-8854-a4b60b95557b",
            "12e1e4d2-a81c-4095-b9af-0abe736bae96",
            "2d031938-b142-4d4d-a18e-c85093c99809",
            "99a94d64-d727-4916-b1ed-d8a8912cc679",
            "1354170c-f7fb-4862-a23e-888d361fcc09",
            "93cb3ff4-aa28-4dd1-92e7-30199573cc17",
            "adc430f1-7090-492b-a5c6-fe1858067d05",
            "f56946ef-1f4b-432a-b0cb-cbbc35ddda31",
            "9f0903c8-f41b-4964-91ba-bcc41f1b2d04",
            "7e8897e0-bfc1-487f-994e-b2f9508473ae",
            "1cefc896-7950-454e-a69b-87d1f32a4db0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21962,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "OD-Weather-Report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "reportFilename": "OD-Weather-Report",
        "overwrite": "true",
        "html": "true",
        "json": "true"
      },
      "version": "6.3.0"
    }
  }
}